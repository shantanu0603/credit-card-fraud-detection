# -*- coding: utf-8 -*-
"""credit_card_fraud.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17mB_6MKlB0PzuT10koASTU7uHQkiwaVm
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline

df =pd.read_csv('/content/drive/MyDrive/creditcard.csv')
df_sampled = df.sample(frac=0.5 , random_state =42)

df_sampled.describe()

df.isnull().sum()

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'Class' is a categorical variable in your sampled DataFrame 'df_sampled'
sns.catplot(x='Class', kind='count', data=df_sampled, height=6, aspect=1.5)

# Adding labels and title for better readability
plt.xlabel('Class')
plt.ylabel('Count')
plt.title('Count Plot of Class in Sampled Data')

# Display the plot
plt.show()

df_temp = df.drop(columns=['Time','Amount','Class'],axis=1)

fig, ax =plt.subplots(ncols=4 , nrows=7 ,figsize=(20,50))
index =0
ax = ax.flatten()

for col in df_temp.columns:
  sns.displot(df_temp[col], ax =ax[index])
  index += 1
  plt.tight_layout(pad = 0.5,w_pad=0.5,h_pad=5)

#coorelation matrix

corr = df_sampled.corr()
plt.figure(figsize=(30,40))
sns.heatmap(corr, annot=True , cmap='coolwarm')

X= df_sampled.drop(columns=['Class'],axis=1)
Y= df_sampled['Class']

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_scaler= sc.fit_transform(X)

X_scaler[-1]

# train test split
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, f1_score
X_train, X_test, Y_train, Y_test = train_test_split(X_scaler, Y, test_size=0.25, random_state=42, stratify=Y)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
#training
model.fit(X_train,Y_train)
Y_pred =model.predict(X_test)
print(classification_report(Y_test,Y_pred))
print('F1 score:',f1_score(Y_test,Y_pred))

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
#training
model.fit(X_train,Y_train)
Y_pred =model.predict(X_test)
print(classification_report(Y_test,Y_pred))
print('F1 score:',f1_score(Y_test,Y_pred))

sns.countplot(Y_train)